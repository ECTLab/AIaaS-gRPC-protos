syntax = "proto3";

import "google/protobuf/struct.proto";


package recommendation;


service Recommendation {
    rpc CreateModel(CreateModelRequest) returns (CreateModelResponse); 
    rpc StartColdStart(StartColdStartRequest) returns (StartColdStartResponse);
    rpc StartSimilarItems(StartSimilarItemsRequest) returns (StartSimilarItemsResponse);
    rpc StartUserSpecific(StartUserSpecificRequest) returns (StartUserSpecificResponse);
    rpc ColdStart(ColdStartRequest) returns (ColdStartResponse);
    rpc SimilarItems(SimilarItemsRequest) returns (SimilarItemsResponse);
    rpc UserSpecific(UserSpecificRequest) returns (UserSpecificResponse);
    rpc SetCounter(SetCounterRequest) returns (SetCounterResponse);
    rpc GetCounter(GetCounterRequest) returns (GetCounterResponse);
}

message ModelProperties {
    string username = 1;
    string model_name = 2;
}

message CreateModelRequest {
    ModelProperties model = 1;
    bool verbose = 2;
}

message CreateModelResponse { // empty message
}

message dataProperties {
    string user_info_path = 1;
    string user_ratings_path = 2;
    string item_info_path = 3;
    repeated string user_info_columns = 4;
    repeated string user_ratings_columns = 5;
    repeated string item_info_columns = 6;
    optional string user_info_sep = 7;
    optional string user_ratings_sep = 8; 
    optional string item_sep = 9;
}

message StartColdStartRequest {
    ModelProperties model = 1;
    dataProperties data = 2;
    bool verbose = 3;
}

message StartColdStartResponse{  // empty message
}

message StartSimilarItemsRequest {
    ModelProperties model = 1;
    dataProperties data = 2;
    bool verbose = 3;
    optional string algo = 4;
    optional int32 k = 5;
    optional int32 min_k = 6;
    optional google.protobuf.Struct sim_options = 7;
    optional google.protobuf.Struct bsl_options = 8;
    optional int32 n = 9;
}

message StartSimilarItemsResponse{ // empty message
}

message StartUserSpecificRequest {
    ModelProperties model = 1;
    dataProperties data = 2;
    bool verbose = 3;
    int32 k = 4; // should be optional
    int32 k_start = 5; // should be optional
    int32 k_end = 6; // should be optional
}

message StartUserSpecificResponse{ // empty message
}

message ColdStartRequest{
    ModelProperties model = 1;
    bool verbose = 2;
    int32 n = 3; // should be optional
}

message ColdStartItem{
    int32 item_id = 1;
    string movie_title = 2;
    optional int32 rate = 3;
}

message ColdStartResponse{
    repeated ColdStartItem items = 1;
}

message SimilarItemsRequest{
    ModelProperties model = 1;
    bool verbose = 2;
    int32 n = 3; // should be optional
    string item_name = 4;
}

message SimilarItemsItem{
    int32 item_id = 1;
    string movie_title = 2;
}

message SimilarItemsResponse{
    repeated SimilarItemsItem items = 1;
}

message UserSpecificRequest{
    ModelProperties model = 1;
    bool verbose = 2;
    int32 dataset_userid = 3;
    int32 n = 4; // should be optional
}

message UserSpecificItem{
    int32 item_id = 1;
    string movie_title = 2;
    int32 rate = 3;
}

message UserSpecificResponse {
    repeated UserSpecificItem items = 1;
}

message SetCounterRequest {
    ModelProperties model = 1;
    int32 counter = 2;
}

message SetCounterResponse { // empty message
}

message GetCounterRequest {
    ModelProperties model = 1;
}

message GetCounterResponse {
    int32 counter = 1;
}